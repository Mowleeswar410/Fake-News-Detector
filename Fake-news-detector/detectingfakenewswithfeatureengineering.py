# -*- coding: utf-8 -*-
"""DetectingFakeNewswithFeatureEngineering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WvmXFtG9fVCmL8AJ3Immm-cjudlqpKCx
"""

import pandas as pd
from google.colab import files
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

uploaded = files.upload()

data = pd.read_csv("cleaned_dataset.csv")

data.head()

fake_news_data = data[data['label'] == "Fake"]
vectorizer = CountVectorizer(stop_words='english')
X = vectorizer.fit_transform(fake_news_data["text"])
word_frequencies = X.toarray().sum(axis=0)
feature_names = vectorizer.get_feature_names_out()
keywords = [feature_names[i] for i in word_frequencies.argsort()[-10:][::-1]]
print(keywords)

site_counts = data["site_url"].value_counts()
fake_site_counts = data[data["label"]=="Fake"]["site_url"].value_counts()
fake_news_percentage = fake_site_counts / site_counts

def fakenewsprediction(title, news_source):
  title_contains_keyword = any(keyword in title.lower() for keyword in keywords)
  if news_source in fake_news_percentage:
    source_fake_percentage = fake_news_percentage[news_source]
  else:
    source_fake_percentage = 0.0

  if title_contains_keyword and source_fake_percentage > 0.5:
    return "Fake News"
  else:
    return "Real News"

text_input = "Breaking: election week is over"
source_input = "der-postillon.com"
prediction = fakenewsprediction(text_input,source_input)
print(f"Prediction: {prediction}")